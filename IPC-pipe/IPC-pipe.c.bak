/* CS 519, FALL 2019: HW-1 
 * IPC using pipes to perform matrix multiplication.
 * Feel free to extend or change any code or functions below.
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/wait.h>

//Add all your global variables and definitions here.
#define MATRIX_SIZE 1000


void semaphore_init(int sem_id, int sem_num, int init_valve)
{

   //Use semctl to initialize a semaphore
}

void semaphore_release(int sem_id, int sem_num)
{
  //Use semop to release a semaphore
}

void semaphore_reserve(int sem_id, int sem_num)
{

  //Use semop to acquire a semaphore
}

/* Time function that calculates time between start and end */
double getdetlatimeofday(struct timeval *begin, struct timeval *end)
{
    return (end->tv_sec + end->tv_usec * 1.0 / 1000000) -
           (begin->tv_sec + begin->tv_usec * 1.0 / 1000000);
}


/* Stats function that prints the time taken and other statistics that you wish
 * to provide.
 */
void print_stats() {



}


int main(int argc, char const *argv[])
{
	/*
	int pipefd[2];
	if(pipe(pipefd) < 0) {
		fprintf(stderr, "pipe() failed!\n");
		return 1;
	}
	printf("hello world (pid=%d)\n", (int)getpid());
	pid_t fid = fork();
	if(fid < 0) {
		fprintf(stderr, "fork failed\n");
		return 1;
	}else if(fid == 0) {
		// child
		printf("I am child, pid=%d\n", getpid());
		write(pipefd[1], "12345", 5);
		return 0;
	}else {
		// parent
		wait(NULL);
		printf("I am parent[pid=%d], my child[pid=%d]\n", getpid(), fid);
		char buf[20];
		read(pipefd[0], buf, 20);
		printf("Oh, it comes!\n%s\n", buf);
	}
	*/

	/*
	int *p = (int*) malloc(sizeof(int));
	*p = 100;
	int fid = fork();
	if(fid < 0) {
		fprintf(stderr, "fork failed\n");
		return 1;
	}else if(fid == 0) {
		printf("Hello, I am child, pid=%d\n", (int)getpid());
		*p = 500;
		printf("Child, *p=%d\n", *p);

	}else {
		wait(NULL);
		printf("I am parent[pid=%d] of a child[pid=%d]\n", (int)getpid(), fid);
		printf("Parent, *p=%d\n", *p);
	}
	*/

   print_stats(); 

   return 0;
}


